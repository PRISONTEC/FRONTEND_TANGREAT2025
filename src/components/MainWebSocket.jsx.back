import React, { useState, useCallback, useEffect, useContext, useRef } from 'react';
import { useMediaQuery } from 'react-responsive';
import useWebSocket, { ReadyState } from 'react-use-websocket';
import { UserContext } from '../context/UserContext';
import ListarBQs from './ListarBQs';
import NavBar from './NavBar';
import NavBar2 from './NavBar2';
import MostrarBandas from './MostrarBandas';
import '../assets/css/mostrarBandas.scss';
import Configuracion from './estructura/configuracion';
import Yonlit from './yonlit/Yonlit';
import Umbrales from './estructura/Umbrales';
import PreguntarStatus from './estructura/PreguntarStatus';
import YonlitComando from './estructura/YonlitComando';
import { Dots } from "react-activity";
import HistoricoBloqueador from './historicoBloqueador/historicoBloqueador';
import Bloqueador from './estructura/Bloqueador';
import Inventario from './estructura/inventario';


function MainWebSocket() {
  console.log("crear componentes")
  
  //VARIABLES DECLARADAS
/*   const dbConfigs = {101:'192.168.150.5' ,102:'192.168.151.5' ,103:'192.168.152.5' ,104:'192.168.153.5' ,105:'192.168.154.5' ,106:'192.168.155.5' ,107:'192.168.156.5' ,108:'192.168.157.5' ,107:'192.168.156.5' ,110:'192.168.158.5' ,111:'192.168.159.5' ,112:'192.168.160.5' ,113:'192.168.161.5' ,114:'192.168.162.5' ,115:'192.168.163.5' ,116:'192.168.164.5' ,117:'192.168.165.5' ,118:'192.168.166.5' ,119:'192.168.167.5' ,120:'192.168.168.5' ,121:'192.168.169.5' ,122:'192.168.170.5' ,123:'192.168.171.5' ,124:'192.168.172.5' ,125:'192.168.173.5' ,126:'192.168.174.5' ,127:'192.168.175.5' ,128:'192.168.176.5' ,129:'192.168.177.5',130:'192.168.169.253',131:'190.187.248.85'}
 */  
  const [startConnection, setStartConnection] = useState(false);
  const [botonReconexion, setBotonReconexion] = useState("");
  const isSmallScreen = useMediaQuery({ maxWidth: 800 });
  const isMediumScreen = useMediaQuery({ minWidth: 800, maxWidth: 1024 });
  const [showBQ, setShowBQ] = useState(false);
  const [botonConfiguracion, setBotonConfiguracion] = useState(false)

  //UseContext
  const {puerto,IPBACKEND,listarBQS, setDatosBQS, seleccionarBQSA1, setDatosModificacion, selectedOption, setActualizado, setDataUmbrales, setUmbralesVisualizar, setDataStatus, setStatusVisualizar, setDataYonlit, setYonlitVisualizar, cambiarPagina } = useContext(UserContext);

  //!.env
  //setIPBACKEND(dbConfigs[import.meta.env.VITE_REACT_APP_API_KEY])

  //CONEXION WEBSOCKET
  //Public API that will echo messages sent to it back to the cliente
   const socketUrl = `ws://${IPBACKEND}:${puerto[0]}/monitorBQ/consultaDatos`; 
  /* const socketUrl = 'ws://192.168.169.253:7654/monitorBQ/consultaDatos'; */
 /* console.log(`ws://${IPBACKEND}:${puerto[0]}/monitorBQ/consultaDatos`)  */
  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl/* ,
    {
      shouldReconnect: (closeEvent) => true,
      reconnectAttempts: 2,
      //attemptNumber will be 0 the first time it attempts to reconnect, so this equation results in a reconnect pattern of 1 second, 2 seconds, 4 seconds, 8 seconds, and then caps at 10 seconds until the maximum number of attempts is reached
      reconnectInterval: (attemptNumber) =>
        Math.min(Math.pow(2, attemptNumber) * 1000, 3000),
    } */
  );

  const handleClickSendMessage = useCallback(() => sendMessage('prisontec:$t3l3ph0ny$'), []);


  const connectionStatus = {
    [ReadyState.CONNECTING]: 'Connecting',
    [ReadyState.OPEN]: 'Open',
    [ReadyState.CLOSING]: 'Closing',
    [ReadyState.CLOSED]: 'Closed',
    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',
  }[readyState];

  useEffect(() => {
    
    /* setBotonReconexion(connectionStatus) */
    // la primera vez envía un mensaje .... {startConnection:true}
    if (lastMessage==null) {
      console.log("sendMensaje")
      handleClickSendMessage();
      // {startConnection : false}
      setStartConnection(prev => !prev);
    }
    // si se cierra la conexión, nuevamente {startConnection:true}
    if (connectionStatus.toLowerCase() == 'closed') {
      setStartConnection(prev => !prev);
    }
    processing();
  }, [lastMessage, readyState]);
  

  const processing = () => {
    if (lastMessage !== null && lastMessage.data != 'Access Granted!!!' && lastMessage.data != 'Invalid Command') {
      console.log("Se conectó", lastMessage)
      let dataMids = JSON.parse(lastMessage.data);
      let datosRecibidos = JSON.parse(lastMessage.data);
      let datosRecibidosDialogo = JSON.parse(lastMessage.data);
      if (dataMids.mids) {
        // ultimosDatosObtenidos
        const resultado = Object.groupBy(dataMids.ultimosDatosObtenidos, (mids) => {
          return mids.mid
        })
        listarBQS["ultimosDatosObtenidos"] = [resultado]
        listarBQS["mids"] = dataMids.mids
        setDatosBQS(dataMids.mids);
        /* ejecutarTiempo(); */
        setBotonConfiguracion(true)

      } else if (dataMids["res"] == "OK") {
        //!Cambiar parámetros y obtener los datos de configuración
        if (typeof datosRecibidosDialogo["rptaCommand"] === "string") {
          sendMessage(`{"command": "preguntarStatusBandasMID", "mid":"${selectedOption}"}`);
          setDatosBQS("KOKO");
        } else if (Array.isArray(datosRecibidosDialogo["rptaCommand"])) {
          if (datosRecibidosDialogo["rptaCommand"][0]["MID"] == selectedOption) {
            setDatosModificacion(datosRecibidosDialogo["rptaCommand"])
            setActualizado(false)
            setDatosBQS(dataMids["res"]);
          }
        }
      } else if (dataMids["res"] == "KO") {
        setDatosBQS(dataMids["res"]);
        setActualizado(false)
      }
      //OBTENER LOS DATOS DE CADA MID
      else {
        if (listarBQS["ultimosDatosObtenidos"] && dataMids[0]) {
          const resultado = Object.groupBy(dataMids[0], (mids) => {
            return mids.mid
          })
          const clave = Object.keys(resultado)[0];
          listarBQS["ultimosDatosObtenidos"][0][clave] = resultado[clave];

        } else if (listarBQS["ultimosDatosObtenidos"] && dataMids['misUmbrales']) {
          setUmbralesVisualizar(false); // falta ver que tiene
          setDataUmbrales(dataMids['misUmbrales'])
        } else if (listarBQS["ultimosDatosObtenidos"] && dataMids['status']) {
          setStatusVisualizar(false); // falta ver que tiene
          setDataStatus(dataMids['status'])
        } else if (listarBQS["ultimosDatosObtenidos"] && dataMids['CommandOnOffYonlit']) {
          setYonlitVisualizar(false); // falta ver que tiene
          setDataYonlit(dataMids['CommandOnOffYonlit'])
        }
      }
    } else {
      console.log(lastMessage)
    }

  }

  /* function ejecutarTiempo() {
    setTimeout(function () {
      setBotonConfiguracion(true)
    }, 12000);
  } */

  /* function ejecutarTiempo() {
    setTimeout(function () {
      setBotonConfiguracion(true)
    }, 12000);
  } */

  
  return (
    <div className='grid-container'>
      <div className='header'/* style={{ height: "50px" }} */>
        {
          !showBQ ?
            <>
              <NavBar isSmallScreen={isSmallScreen} functionBtnMenu={() => setShowBQ(prev => !prev)} />
            </>

            :
            <NavBar2 isSmallScreen={isSmallScreen} functionBtnMenu={() => setShowBQ(prev => !prev)} />
        }
      </div>
      {!cambiarPagina ? <>
        <div className='aside' style={{ display: 'flex', justifyContent: 'flex-start'}}/* style={{ height: `calc(100vh - 50px)`, width: "100vw", marginLeft: "-2vw" }} */>
          {showBQ || !isSmallScreen ? <ListarBQs isSmallScreen={isSmallScreen} setShowBQ={setShowBQ} /> : null}
        </div>


        {!showBQ ?
          <div className='section'/* className='tamanoCuadroConfiguracion marginTopCelularConfiguracion' */ >
            <div className='sectionDiv' /* style={{ height: "120vh", overflowY: "auto", maxHeight: "86vh", backgroundColor: "#3C4364", borderStyle: "solid", borderWidth: "5px", borderColor: "white", marginTop: "10vw", marginLeft: "1vw", marginRight: "2vw", borderRadius: "10px" }} */ >
              {/* //!MENU CONFIGURACION */}
              <div className='row' style={{ zIndex: '1', display: 'flex', flexWrap: 'wrap', marginTop: ".5vw", marginLeft: "1vw", marginRight: "1.5vw" }}>
                <div className='tamanoContenedorYonli' style={{ background: '#CCD1D1', borderRadius: '8px', margin: '4px 8px 0px 0px', border: '2px solid white', display: 'flex', flexDirection: 'column', flexWrap: 'wrap' }}>
                  <div className='menuConfiguracionTitulos' style={{ margin: '0px', padding: '0px' }}>
                    <div style={{ display: 'flex', flexDirection: 'row' }}>
                      <h6 style={{ marginRight: '10px' }} >Test Yonlit</h6>
                      {botonConfiguracion == false ? <Dots /> : null}
                    </div>
                  </div>
                  <div>
                    <div className='col col-12 col-sm-12 col-lg pb-1' >
                      <YonlitComando sendMessage={sendMessage} botonConfiguracion={botonConfiguracion}></YonlitComando>
                    </div>
                  </div>

                </div>
                <div className='col ' style={{ background: '#CCD1D1', margin: '4px 17px 0px 0px', border: '2px solid white', borderRadius: '8px' }}>
                  <div className='row menuConfiguracionTitulos' style={{ margin: '0px', padding: '0px' }}>
                    <div style={{ display: 'flex', flexDirection: 'row' }}>
                      <h6 style={{ marginRight: '10px' }}>Mantenimiento tangreat</h6>
                      {botonConfiguracion == false ? <Dots /> : null}
                    </div>
                  </div>
                  <div className='row pb-1'>
                    <div className='col col-3 col-sm-12 col-md-6 col-lg-4 col-xl p-md-1' >
                      <Umbrales sendMessage={sendMessage} botonConfiguracion={botonConfiguracion}></Umbrales>
                    </div>
                    <div className='col col-4 col-sm-12 col-md-6 col-lg-4 col-xl p-md-1'>
                      <Configuracion sendMessage={sendMessage} botonConfiguracion={botonConfiguracion}></Configuracion>
                    </div>
                    <div className='col col-5 col-sm-12 col-md-12 col-lg-4 col-xl p-md-1' >
                      <PreguntarStatus sendMessage={sendMessage} botonConfiguracion={botonConfiguracion}></PreguntarStatus>
                    </div>
                    <div className='col col-5 col-sm-12 col-md-12 col-lg-4 col-xl p-md-1' >
                      <Bloqueador sendMessage={sendMessage} botonConfiguracion={botonConfiguracion}></Bloqueador>
                    </div>
                    <div className='col col-5 col-sm-12 col-md-12 col-lg-4 col-xl p-md-1' >
                      <Inventario sendMessage={sendMessage} botonConfiguracion={botonConfiguracion}></Inventario>
                    </div>
                  </div>
                </div>
              </div>

              {/* //!CUERPO */}
              <div className="tamanoBQ" style={{ marginTop: ".5vw", marginLeft: "1vw", marginRight: "2vw", fontWeight: "bold", color: "white" }}>
                {seleccionarBQSA1 != null ? seleccionarBQSA1 : null}
              </div>
              <div>


                <div style={{ borderStyle: "solid", borderWidth: "2px", borderColor: "white", marginTop: ".5vw", marginLeft: "1vw", marginRight: "2vw" }}>
                  <MostrarBandas  ></MostrarBandas>
                </div>
                <div style={{ marginBottom: 10,/* borderStyle: "solid", borderWidth: "2px", borderColor: "white", */marginTop: "0.5vw", marginLeft: "1vw", marginRight: "2vw", overflow: "auto", maxHeight: "100vh" }}>
                  <Yonlit></Yonlit>
                </div>
              </div>
            </div>
          </div>
          : null}
      </> : 
          <div>
            <HistoricoBloqueador></HistoricoBloqueador>
          </div>
      }
    </div>
  )
}


export default MainWebSocket